# name=escape-dlog

.include "M.dom"
.include "H.dom"
.include "F.dom"
.include "V.dom"
.include "Z.dom"

.bddvarorder M0_V0xV1_H0_F0_H1_Z0

###
# Relations
###

# use only these input relations
MmethArg(m:M0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
MH(m:M0,h:H0) input
VH(v:V0,h:H0) input
FH(f:F0,h:H0) input
HFH(h:H0,f:F0,h2:H1) input
reachableM(m:M0) input

# TODO: declare any intermediate relations you might need

# This indicates that an object allocated at site h
# may be reachable on the heap. I want the output to
# exclude all of these
reachableHeap(h:H0)

# use only these output relations
localMH(m:M0,h:H0) output

###
# Constraints
###

# TODO: write constraints to compute above output relation

#***********************
# Set up the sites I want to exclude
#***********************
# This is doing pretty good
# I think I need to set up the recusion as the last step
reachableHeap(h) :- MH(m,h), MmethArg(m,_,v), VH(v,h).
reachableHeap(h) :- MH(m,h), MmethRet(m,_,v), VH(v,h).
reachableHeap(h) :- FH(_,h).

# This removes too little (nothing actually)
#reachableHeap(h) :- reachableHeap(h2), HFH(h,_,h2).
#reachableHeap(h) :- reachableHeap(h2), HFH(h2,_,h).

# This removes too much
#reachableHeap(h) :- HFH(_,_,h).

#
localMH(m,h) :- reachableM(m), MH(m,h), !reachableHeap(h).
#localMH(m,h) :- reachableM(m), MH(m,h).



