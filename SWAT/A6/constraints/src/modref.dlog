# name=modref-dlog

.include "M.dom"
.include "H.dom"
.include "F.dom"
.include "I.dom"
.include "V.dom"

.bddvarorder I0xM0_V0xV1_H0_F0_H1

###
# Relations
###

# use only these input relations
MgetInstFldInst(m:M0,l:V0,b:V1,f:F0) input
MputInstFldInst(m:M0,b:V0,f:F0,r:V1) input
MgetStatFldInst(m:M0,l:V0,f:F0) input
MputStatFldInst(m:M0,f:F0,r:V0) input
VH(v:V0,h:H0) input
MI(m:M0,i:I0) input
IM(i:I0,m:M0) input
reachableM(m:M0) input

# TODO: declare any intermediate relations you might need

# I need to find all the methods reachable from a method
# These are the descendents of method m
descendants(m:M0,m1:M1)

# use only these output relations
refStatField(m:M0,f:F0) output
modStatField(m:M0,f:F0) output
refInstField(m:M0,h:H0,f:F0) output
modInstField(m:M0,h:H0,f:F0) output

###
# Constraints
###

# TODO: write constraints to compute above output relations

# Find all the methods that can be called from a given method, directly or transitively
# This is just a single level of transitivity
descendants(m, m1) :- IM(i,m1), MI(m,i).
# This might make it recursive so I can get all the layers
# This is too inclusive. It seems that this is working forwards and backwards
descendants(m, m2) :- descendants(m,m1),IM(i,m1),MI(m2,i).



# This only gets the fields references directly in a method
refStatField(m,f) :- reachableM(m), MgetStatFldInst(m,_,f).
refStatField(m,f) :- descendants(m,m1), MgetStatFldInst(m1,_,f).
