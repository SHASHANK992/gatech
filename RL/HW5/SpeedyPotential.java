import burlap.oomdp.statehashing.DiscretizingHashableStateFactory;
import burlap.oomdp.core.states.MutableState;
import burlap.domain.singleagent.graphdefined.GraphDefinedDomain;
import burlap.oomdp.auxiliary.DomainGenerator;
import burlap.domain.singleagent.graphdefined.GraphTF;
import burlap.oomdp.auxiliary.common.NullTermination;
import burlap.oomdp.core.*;
import burlap.oomdp.singleagent.GroundedAction;
import burlap.domain.singleagent.graphdefined.GraphRF;
// TDLamba is a critic for the actorCritic stuff. I am guessing that
// my BoundedRandomWalk class will be what the actor uses
import burlap.behavior.singleagent.learning.actorcritic.critics.TDLambda;
import burlap.behavior.singleagent.learning.actorcritic.actor.BoltzmannActor;
import burlap.behavior.singleagent.learning.actorcritic.ActorCritic;
import burlap.behavior.singleagent.EpisodeAnalysis;
import burlap.behavior.singleagent.learning.actorcritic.CritiqueResult;
import burlap.oomdp.core.states.State;
import burlap.behavior.singleagent.planning.stochastic.valueiteration.ValueIteration;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 *
 * @author Jacob
 */
public class SpeedyPotential {

    DomainGenerator          dg;
    Domain                   domain;
    MutableState             initState;
    SpeedyPotentialReward    rf;
    TerminalFunction         tf;
    DiscretizingHashableStateFactory hashFactory;
    ValueIteration           vi;
    
    int numStates;
    double gamma;
    int numActions;
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) 
    {
        
        System.out.println("***************************");
        System.out.println("Test 1");
        System.out.println("***************************"); 
        /*
        int numStates = 15;
        int numActions = 4;
        double[][][] probabilitiesOfTransitions = {{{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.9,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.1,0.9,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.8,0.1,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.1,0.1,0.0,0.0,0.8,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.1,0.0,0.0,0.0,0.8,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.8,0.0,0.0,0.1,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.1,0.0,0.0,0.8,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.8,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.8,0.0,0.0,0.1,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.8,0.0,0.1,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.1,0.0,0.8,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.0,0.8,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.8,0.0,0.1,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.8,0.0,0.0,0.1,0.1,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.8,0.0,0.0,0.1,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.1,0.0,0.8,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0}}};
        double[][][] rewards = {{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1},{-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-1.0,-0.1,-0.1,-0.1,-0.1,-1.0,-0.1,1.0,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}};
        double gamma = 0.99;
        
        // Create new instance of SpeedyPotential
        SpeedyPotential sp = new SpeedyPotential(numStates, numActions, probabilitiesOfTransitions, rewards, gamma );
        
        sp.vi.planFromState(sp.initState);
        
        sp.printStateValues();
        */
        
        System.out.println("");
        System.out.println("");
        System.out.println("***************************");
        System.out.println("Test 2");
        System.out.println("***************************"); 
        
        int numStates = 12;
        int numActions = 4;
        double[][][] probabilitiesOfTransitions = {{{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.1,0.8,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.9,0.1,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.9,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.1,0.1,0.0,0.0,0.8,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.9,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0},{0.0,0.1,0.9,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.8,0.1,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.0},{0.0,0.1,0.1,0.0,0.0,0.0,0.8,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.1,0.0,0.0,0.0,0.0,0.8,0.0,0.0,0.1,0.0,0.0},{0.0,0.8,0.0,0.0,0.1,0.0,0.1,0.0,0.0,0.0,0.0,0.0},{0.0,0.1,0.0,0.0,0.8,0.0,0.0,0.0,0.0,0.1,0.0,0.0},{0.0,0.0,0.0,0.0,0.1,0.0,0.1,0.0,0.0,0.8,0.0,0.0}},{{0.0,0.0,0.1,0.0,0.0,0.0,0.0,0.8,0.0,0.0,0.1,0.0},{0.0,0.0,0.8,0.0,0.0,0.1,0.0,0.1,0.0,0.0,0.0,0.0},{0.0,0.0,0.1,0.0,0.0,0.8,0.0,0.0,0.0,0.0,0.1,0.0},{0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.1,0.0,0.0,0.8,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.1,0.8,0.0},{0.0,0.0,0.0,0.0,0.0,0.8,0.0,0.0,0.0,0.1,0.1,0.0},{0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.9,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.9,0.1,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.0,0.9,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.8,0.0,0.0,0.1,0.1,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.0,0.0,0.8,0.1,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1,0.9,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0}}};
        double[][][] rewards = {{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1}},{{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1}},{{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}},{{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1}},{{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1},{-0.1,-0.1,-0.1,-0.1,1.0,-0.1,-0.1,-1.0,-0.1,-0.1,-0.1,-0.1}},{{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}}};
        double gamma = 0.99;
        
        // Create new instance of SpeedyPotential
        SpeedyPotential sp = new SpeedyPotential(numStates, numActions, probabilitiesOfTransitions, rewards, gamma );
        
        sp.vi.planFromState(sp.initState);
        
        sp.printStateValues();
        
    }
    
    
    
    // Constructor
    public SpeedyPotential(int numberStates, int numberActions, double[][][] probTransitions, double[][][] rewards, double gamma)
    {
        this.numStates = numberStates;
        this.gamma = gamma;
        this.numActions = numberActions;
        
        // Create new domain generator
        this.dg = new GraphDefinedDomain(this.numStates);
        
        // Fill in the state transitions using data from constructor
        fillInTransitions(probTransitions);
        
        // Construct the domain
        this.domain = this.dg.generateDomain();
        this.initState = (MutableState)GraphDefinedDomain.getState(this.domain, 3);
        
        // Construct the reward and terminal functions
        this.rf = new SpeedyPotentialReward(rewards);
        this.tf = new NullTermination();
        
        // Construct state hash factory
        this.hashFactory = new DiscretizingHashableStateFactory(2.5); // Not sure what this value does
        
        
        this.vi = new ValueIteration(this.domain, this.rf, this.tf, this.gamma, this.hashFactory, 0.0001, 10000);
        
    }
    
    private void fillInTransitions(double[][][] pTrans)
    {
        // For every state
        for(int i = 0; i < this.numStates; i++)
        {
            // For every action
            for(int j = 0; j < this.numActions; j++)
            {
                // For every potential next state
                // Note: To speed this up I could try to go over only the 
                // non-zero entries, but I think I prefer defining everything
                // explicitly
                for(int k = 0; k < this.numStates; k++)
                {
                    double probOfTransition = pTrans[i][j][k];
                    
                    // Set the transition probability for this state/action pair
                    ((GraphDefinedDomain)this.dg).setTransition(i,j,k,probOfTransition);
                }
            }
        }
    }
    
    public void printStateValues()
    {
        for(int i=0; i < this.numStates; i++)
        {
            // Get the state
            State s = (MutableState)GraphDefinedDomain.getState(this.domain, i);
            double stateVal = this.vi.value(s);
            System.out.println("Value of State " + i + " = " + stateVal);
        }
    }
    
    /*
    Reward function definition    
    */
    public static class SpeedyPotentialReward extends GraphRF
    {
        double[][][] rewards;
        
        SpeedyPotentialReward(double[][][] rewards)
        {
            this.rewards = rewards;
        }
        
        @Override
        public double reward(int s, int a, int sprime)
        {            
            return this.rewards[s][a][sprime];
        }
    }
    
    
    
    
}
